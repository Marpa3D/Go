// Структуры
package main

import (
	"fmt"
)

type Person struct {
	Name  string
	Email string
	Age   int
}

func main() {
	// Способы создания экземпляра(объекта) структуры
	// 1. Пустой объект. Поля принимают значения по умолчанию для своих типов
	// Создается для дальнейшего использования в коде
	var p Person
	p1 := Person{}
	fmt.Printf("Тип: %T Полное описание и значения:%#v Адрес в памяти:%p\n", p, p, &p)
	fmt.Printf("Тип: %T Полное описание и значения:%#v Адрес в памяти:%p\n", p1, p1, &p1)

	// 2. Неявное указание значений
	// Используют литералы либо значения внешних переменных
	// ТРЕБОВАНИЯ:
	// - обязательное указание ВСЕХ полей
	// - порядок следования аргументов инициализатора должен совпадать с описанием полей в структуре!
	p = Person{"Mark",
		"seo@yandex.ru",
		44,
	}
	fmt.Printf("%#v\n", p)

	// 3. Явное указание значений полей
	// При инициализации уазывать все поля необязательно
	// порядок указания полей не важен
	// Применять ВСЕГДА!
	p = Person{Name: "Ilia",
		Email: "seo@ya.ru",
		Age:   44,
	}
	fmt.Printf("%#v\n", p)
	fmt.Printf("%s\n", p.Name)
}

// 4. Конструктор в Go (его аналог)
// Имя функции конструктора пишут с приcnавкой New!
//func NewPerson(Name, Email, Age, dobYear, dobMonth, dobDay int) (Person, error) {}
